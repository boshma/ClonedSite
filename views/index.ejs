<!DOCTYPE html>
<html>

<head>
    <script type="text/javascript" src="/javascripts/main.js"></script>
    <script type="text/javascript" src="/javascripts/map.js"></script>
    <link rel="stylesheet" href="/stylesheets/main.css">
    <link rel="stylesheet" href="/stylesheets/style.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
</head>

<body>

  <div class="container-fluid" style="height: 100vh;">
    <div class="row h-100">
      <div class="col-2 sidebar">
        <div class="row">
          <button type="button" class="btn-close" aria-label="Close"></button>
        </div>
        <div class="row">
          <img src="/resources/WPELogo_white.png" alt="">
        </div>
        <nav>
          <div class="nav flex-column nav-pills" id="v-pills-tab" role="tablist" aria-orientation="vertical">
            <a class="nav-link active" id="v-pills-home-tab" data-toggle="pill" href="index.ejs" role="tab" aria-controls="v-pills-home" aria-selected="true">Map</a>
            <a class="nav-link" id="v-pills-profile-tab" data-toggle="pill" href="education.ejs" role="tab" aria-controls="v-pills-profile" aria-selected="false">Education</a>
            <a class="nav-link" id="v-pills-messages-tab" data-toggle="pill" href="signup.ejs" role="tab" aria-controls="v-pills-messages" aria-selected="false">Subscribe</a>
            <a class="nav-link" id="v-pills-settings-tab" data-toggle="pill" href="about.ejs" role="tab" aria-controls="v-pills-settings" aria-selected="false">About</a>
          </div>
          <div class="tab-content" id="v-pills-tabContent">
            <div class="tab-pane fade show active" id="v-pills-home" role="tabpanel" aria-labelledby="v-pills-home-tab"></div>
            <div class="tab-pane fade" id="v-pills-profile" role="tabpanel" aria-labelledby="v-pills-profile-tab"></div>
            <div class="tab-pane fade" id="v-pills-messages" role="tabpanel" aria-labelledby="v-pills-messages-tab"></div>
            <div class="tab-pane fade" id="v-pills-settings" role="tabpanel" aria-labelledby="v-pills-settings-tab"></div>
          </div>
        </nav>
      </div>
      <div class="col-10">
        <!--Map-->
        <div id='printoutPanel'></div>

        <div id='myMap' style='width: 99vw; height: 80vh;'></div>
        <script type='text/javascript'>
          var map = null;
          var heatMaps = [];

          // Default values
          var latitude = 39.393486;
          var longitude = -98.100769;
          var zoomlevel = 5;

          // Initializes map
          function loadMapScenario(position) {
            // Attempts to set location based on user data
            try {
              latitude = position.coords.latitude;
              longitude = position.coords.longitude;
              zoomlevel = 7;
            }
            // If it fails, just user default values
            catch (error) {}

            // Initialize the map
            map = new Microsoft.Maps.Map(document.getElementById('myMap'), {
              /* No need to set credentials if already passed in URL */
              center: new Microsoft.Maps.Location(latitude, longitude),
              zoom: zoomlevel
            });

            // Put wildfire data on the map
            updateMapData();
          }

          // Adds fire data to map
          function updateMapData() {
            // Removes old data
            for (var i = 0; i < heatMaps.length; i++) {
              map.layers.remove(heatMaps[i]);
            }

            Microsoft.Maps.loadModule('Microsoft.Maps.HeatMap', function() {
              var mapDiv = map.getRootElement();
              //var locations = [];
              var locations1 = [];
              var locations2 = [];
              var locations3 = [];
              var locations4 = [];

              // Base url for getting wildfire data from Node REST API
              var url = document.getElementById("timeSelector").value;

              var data = null;

              // Gets data from server
              (async () => {
                await fetch(url, {
                    method: 'GET',
                    mode: "cors",
                    headers: {
                      'Content-Type': 'application/json'
                    }
                  })
                  .then((response) => {
                    response.text().then((text) => {
                      data = JSON.parse(text);

                      // Adds data points
                      for (i = 0; i < data.length; i++) {
                        var location = new Microsoft.Maps.Location(data[i]['latitude'], data[i]['longitude']);
                        //locations.push(location);
                        if (data[i].risk < 0.25) {
                          locations1.push(location);
                        }
                        else if (data[i].risk < 0.5) {
                          locations2.push(location);
                        }
                        else if (data[i].risk < 0.75) {
                          locations3.push(location);
                        }
                        else {
                          locations4.push(location);
                        }
                      }

                      // Configures heatmap settings
                      /*var heatMap = new Microsoft.Maps.HeatMapLayer(locations, {
                        intensity: 0.65,
                        radius: 10,
                        colorGradient: {
                          '0': 'Black',
                          '0.4': 'Purple',
                          '0.6': 'Red',
                          '0.8': 'Yellow',
                          '1': 'White'
                        },
                        aggregateLocationWeights: true
                      });*/

                      var heatMap1 = new Microsoft.Maps.HeatMapLayer(locations1, {
                        intensity: 0.65,
                        radius: 10,
                        colorGradient: {
                          '0': 'Green',
                          '0.4': 'Green',
                          '0.6': 'Green',
                          '0.8': 'Green',
                          '1': 'Green'
                        },
                        aggregateLocationWeights: true
                      });

                      var heatMap2 = new Microsoft.Maps.HeatMapLayer(locations2, {
                        intensity: 0.65,
                        radius: 10,
                        colorGradient: {
                          '0': 'Yellow',
                          '0.4': 'Yellow',
                          '0.6': 'Yellow',
                          '0.8': 'Yellow',
                          '1': 'Yellow'
                        },
                        aggregateLocationWeights: true
                      });

                      var heatMap3 = new Microsoft.Maps.HeatMapLayer(locations3, {
                        intensity: 0.65,
                        radius: 10,
                        colorGradient: {
                          '0': 'Orange',
                          '0.4': 'Orange',
                          '0.6': 'Orange',
                          '0.8': 'Orange',
                          '1': 'Orange'
                        },
                        aggregateLocationWeights: true
                      });

                      var heatMap4 = new Microsoft.Maps.HeatMapLayer(locations4, {
                        intensity: 0.65,
                        radius: 10,
                        colorGradient: {
                          '0': 'Red',
                          '0.4': 'Red',
                          '0.6': 'Red',
                          '0.8': 'Red',
                          '1': 'Red'
                        },
                        aggregateLocationWeights: true
                      });

                      // Adds heatmap overlay to map
                      //heatMaps.push(heatMap);
                      heatMaps.push(heatMap1);
                      heatMaps.push(heatMap2);
                      heatMaps.push(heatMap3);
                      heatMaps.push(heatMap4);
                      //map.layers.insert(heatMap);
                      map.layers.insert(heatMap1);
                      map.layers.insert(heatMap2);
                      map.layers.insert(heatMap3);
                      map.layers.insert(heatMap4);
                    });
                  })
                  .catch((error) => {});
              })();
            });
            undefined;

            // Example High Risk popup window
            if (isHighRisk()) {
              sleep(500).then(() => {
                centeredPopup('alert.ejs', 'myWindow', '700', '300', 'yes');
              });
            }
          }

          function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
          }

          // Checks for high risk at coordinates (not done)
          function isHighRisk() {
            return false;
          }
        </script>
        <script>
          // Gets user location, and then loads the map with the data
          function getPos() {
            if (navigator.geolocation) {
              navigator.geolocation.getCurrentPosition(loadMapScenario, loadMapScenario);
            }
          }
        </script>

        <!--Loads the map API, and then calls getPos after it finishes-->
        <script type='text/javascript' src='https://www.bing.com/api/maps/mapcontrol?key=Aqs6Rr_y1-4u0HJm4NJ0BlaOLrstaN04VGPZ6p6zAebsK76Ek1U1nAPbmcF2sIno&callback=getPos' async defer></script>

        <script language="javascript">
          // Code for popup windows
          var popupWindow = null;

          function centeredPopup(url, winName, w, h, scroll) {
            // Sets sizing parameters
            LeftPosition = (screen.width) ? (screen.width - w) / 2 : 0;
            TopPosition = (screen.height) ? (screen.height - h) / 2 : 0;
            settings =
              'height=' + h + ',width=' + w + ',top=' + TopPosition + ',left=' + LeftPosition + ',scrollbars=' + scroll + ',resizable'

            // Creates a window displaying the selected file with selected settings
            popupWindow = window.open(url, winName, settings)
          }
        </script>

        <!--Time Selector-->
        <div class="slidecontainer centered">
          <input type="range" min="0" max="100" value="0" class="slider" id="timeSelector">
        </div>
        <div class="centered">
          <p>Value: <span id="timeOutput"></span></p>
        </div>

        <!--Example buttons for testing High Risk and Sign Up popups-->
        <div class="centered">
          <button onclick="centeredPopup('alert.ejs','myWindow','700','300','yes');">High Risk Popup</button>
        </div>

        <div class="search-wrapper">
          <input type="text" id="search-input" placeholder="Enter an address">
          <button onclick="geocodeAddress()" id="search-button">Find Address</button>
        </div>


        <!--Code for selector-->
        <script>
          var output = document.getElementById("timeOutput");
          var slider = document.getElementById("timeSelector");

          output.innerHTML = slider.value; // Display the default slider value

          // Update the current slider value (each time you drag the slider handle)
          slider.oninput = function() {
            // Update map with data from that time period
            updateMapData();

            // Display the selected value
            output.innerHTML = this.value;
          }
        </script>
        <script>
          function geocodeAddress() {
            var address = document.getElementById('search-input').value;
            if (!address) {
              alert('Please enter an address.');
              return;
            }

            Microsoft.Maps.loadModule('Microsoft.Maps.Search', function() {
              var searchManager = new Microsoft.Maps.Search.SearchManager(map);
              var requestOptions = {
                where: address,
                callback: function(answer, userData) {
                  map.setView({
                    bounds: answer.results[0].bestView
                  });
                  map.entities.push(new Microsoft.Maps.Pushpin(answer.results[0].location));
                }
              };
              searchManager.geocode(requestOptions);
            });
          }
        </script>
      </div>
    </div>
  </div>





  <footer class="m-0 d-flex flex-wrap justify-content-between align-items-center py-3 border-top fixed-bottom" style="background-color: black; height: 10%;">
    <div class="col-md-4 d-flex align-items-center">
      <a href="/" class="mb-3 me-2 mb-md-0 text-muted text-decoration-none lh-1">
        <svg class="bi" width="30" height="24">
          <use xlink:href="#bootstrap"></use>
        </svg>
      </a>
      <span class="mb-3 mb-md-0 text-muted">© 2022 Company, Inc</span>
    </div>

    <ul class="nav col-md-4 justify-content-end list-unstyled d-flex">
      <li class="ms-3"><a class="text-muted" href="#"><svg class="bi" width="24" height="24">
            <use xlink:href="#twitter"></use>
          </svg></a></li>
      <li class="ms-3"><a class="text-muted" href="#"><svg class="bi" width="24" height="24">
            <use xlink:href="#instagram"></use>
          </svg></a></li>
      <li class="ms-3"><a class="text-muted" href="#"><svg class="bi" width="24" height="24">
            <use xlink:href="#facebook"></use>
          </svg></a></li>
    </ul>
  </footer>

  <%- include('partials/footer') %>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
</body>

</html>